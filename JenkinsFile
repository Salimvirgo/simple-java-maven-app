pipeline {
    agent {
        label 'builder'
    }

    environment {
        sonarqube_token = credentials('sonar-secret-id')
        IMAGE_NAME = "salimvirgo/dockerchallenge"
        IMAGE_TAG = "latest"
        CONTAINER_NAME = "nginx-deploy-container"
    }

    stages {

        stage('Checkout') {
            steps {
                echo 'Cloning source code...'
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'sudo docker build --no-cache -t ${IMAGE_NAME}:${IMAGE_TAG} .'
            }
        }

        stage('Trivy Security Scan') {
            steps {
                sh '''
                sudo docker run --rm \
                -v /var/run/docker.sock:/var/run/docker.sock \
                -v $PWD:/root/reports \
                aquasec/trivy image \
                --format template \
                --template "@/contrib/html.tpl" \
                -o /root/reports/trivy-report.html \
                ${IMAGE_NAME}:${IMAGE_TAG}
                '''
            }
        }

 

        stage('Publish Trivy Report') {
            steps {
                publishHTML(target: [
                allowMissing: true,
                alwaysLinkToLastBuild: false,
                keepAll: true,
                reportDir: '.',
                reportFiles: 'trivy-report.html',
                reportName: 'Trivy Security Report',
                alwaysLinkToLastBuild: true
                ])
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'docker-hub-id',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh '''
                        echo "$DOCKER_PASS" | sudo docker login -u "$DOCKER_USER" --password-stdin
                        sudo docker push ${IMAGE_NAME}:${IMAGE_TAG}
                    '''
                }
            }
        }

        stage('Deploy in Agent') {
            steps {
                sh '''
                    PORT_IN_USE=$(sudo lsof -t -i:9011)
                    if [ -n "$PORT_IN_USE" ]; then
                    echo "Port 9011 in use, stopping process..."
                    sudo kill -9 $PORT_IN_USE || true
                    fi

                    # Alternatively, remove docker containers using port 9011
                    CONTAINER=$(sudo docker ps -q --filter "publish=9011")
                    if [ -n "$CONTAINER" ]; then
                    echo "Docker container using port 9011 found, stopping it..."
                    sudo docker rm -f $CONTAINER
                    fi

                    sudo docker run -d -p 9011:80 ${IMAGE_NAME}:${IMAGE_TAG}
                    '''
            }
        }
    }

    // Optional post block
    post {
        success {
            echo '✅ Pipeline executed successfully.'
        }
        failure {
            echo '❌ Pipeline failed.'
        }
    }
}
