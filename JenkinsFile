@Library('my_ocp_sharelib') _  
import com.aviro.OpenShiftHelper  

pipeline {
    agent {
        label 'builder'
    }

    environment {
        sonarqube_token = credentials('sonar-secret-id')
        OC_TOKEN = credentials('openshift_id')  // Jenkins credentials
        OC_SERVER = "https://api.rm1.0a51.p1.openshiftapps.com:6443"
        PROJECT = "salimmjalloh46-dev"
        IMAGE_NAME = "salimvirgo/dockerchallenge:latest"
        APP_NAME = "web-terminal-tooling" 
        APP_DEPLOYMENT = "workspacea190f5fcf8534249"
    }

    stages {

        stage('Checkout') {
            steps {
                echo 'Cloning source code...'
                checkout scm
            }
        }

        stage('Login to OpenShift') {
            steps {
                script {
                    OpenShiftHelper.login(this, OC_TOKEN, OC_SERVER)
                }
            }
        }

        stage('Connect to OpenShift Project') {
            steps {
                sh 'sudo oc project ${project}'
            }
        }


        stage('Trivy Security Scan') {
            steps {
                sh '''
                sudo docker run --rm \
                -v /var/run/docker.sock:/var/run/docker.sock \
                -v $PWD:/root/reports \
                aquasec/trivy image \
                --format template \
                --template "@/contrib/html.tpl" \
                 --exit-code 1 \
                --severity MEDIUM,HIGH,CRITICAL \
                -o /root/reports/trivy-report.html \
                ${IMAGE_NAME}:${IMAGE_TAG}
                '''
            }
        }

 

        stage('Publish Trivy Report') {
            steps {
                publishHTML(target: [
                allowMissing: true,
                alwaysLinkToLastBuild: false,
                keepAll: true,
                reportDir: '.',
                reportFiles: 'trivy-report.html',
                reportName: 'Trivy Security Report',
                alwaysLinkToLastBuild: true
                ])
            }
        }

        // stage('Push Docker Image') {
        //     steps {
        //         withCredentials([usernamePassword(
        //             credentialsId: 'docker-hub-id',
        //             usernameVariable: 'DOCKER_USER',
        //             passwordVariable: 'DOCKER_PASS'
        //         )]) {
        //             sh '''
        //                 echo "$DOCKER_PASS" | sudo docker login -u "$DOCKER_USER" --password-stdin
        //                 sudo docker push ${IMAGE_NAME}:${IMAGE_TAG}
        //             '''
        //         }
        //     }
        // }
        

         stage('Deploy in Agent') {
            steps {
                sh '''
                    oc new-app ${IMAGE} -name=${APP_NAME} --namespace=${PROJECT}
                    '''
            }
        }

        // stage('Deploy in Agent') {
        //     steps {
        //         sh '''
        //             PORT_IN_USE=$(sudo lsof -t -i:9011)
        //             if [ -n "$PORT_IN_USE" ]; then
        //             echo "Port 9011 in use, stopping process..."
        //             sudo kill -9 $PORT_IN_USE || true
        //             fi

        //             # Alternatively, remove docker containers using port 9011
        //             CONTAINER=$(sudo docker ps -q --filter "publish=9011")
        //             if [ -n "$CONTAINER" ]; then
        //             echo "Docker container using port 9011 found, stopping it..."
        //             sudo docker rm -f $CONTAINER
        //             fi

        //             sudo docker run -d -p 9011:80 ${IMAGE_NAME}:${IMAGE_TAG}
        //             '''
        //     }
        // }
    }

    // Optional post block
    post {
        success {
            echo '✅ Pipeline executed successfully.'
        }
        failure {
            echo '❌ Pipeline failed.'
        }
    }
}
